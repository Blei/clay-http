
//
// Encoding
//

private var alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

private encode3(stream, a, b, c) {
    var q = shiftRight(a, 2);
    write(stream, alphabet[q]);
    var r = bitwiseOr(shiftLeft(bitwiseAnd(a, 3), 4), shiftRight(b, 4));
    write(stream, alphabet[r]);
    var s = bitwiseOr(shiftLeft(bitwiseAnd(b, 15), 2), shiftRight(c, 6));
    write(stream, alphabet[s]);
    var t = bitwiseAnd(c, 63);
    write(stream, alphabet[t]);
}

private encode2(stream, a, b) {
    var q = shiftRight(a, 2);
    write(stream, alphabet[q]);
    var r = bitwiseOr(shiftLeft(bitwiseAnd(a, 3), 4), shiftRight(b, 4));
    write(stream, alphabet[r]);
    var s = shiftLeft(bitwiseAnd(b, 15), 2);
    write(stream, alphabet[s]);
    write(stream, '=');
}

private encode1(stream, a) {
    var q = shiftRight(a, 2);
    write(stream, alphabet[q]);
    var r = shiftLeft(bitwiseAnd(a, 3), 4);
    write(stream, alphabet[r]);
    write(stream, "==");
}

encode(stream, str) {
    var n = size(str);
    var fullRounds = n/3;
    var rest = remainder(n, 3);
    for (i in range(fullRounds)) {
        encode3(stream, str[i*3], str[i*3 + 1], str[i*3 + 2]);
    }
    if (rest == 1) {
        encode1(stream, str[fullRounds*3]);
    } else if (rest == 2) {
        encode2(stream, str[fullRounds*3], str[fullRounds*3 + 1]);
    }
}

overload encode(str) {
    var buf = String();
    encode(buf, str);
    return move(buf);
}


//
// Decoding
//

private var revAlphabet = [
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1,
        -1, 0, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
        18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31,
        32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51
    ];

private decode4(stream, q, r, s, t) {
    var a = bitwiseOr(shiftLeft(revAlphabet[q], 2), shiftRight(revAlphabet[r], 4));
    write(stream, a);
    if (s == Byte('=')) {
        return;
    }
    var b = bitwiseOr(shiftLeft(bitwiseAnd(revAlphabet[r], 15), 4), shiftRight(revAlphabet[s], 2));
    write(stream, b);
    if (t == Byte('=')) {
        return;
    }
    var c = bitwiseOr(shiftLeft(bitwiseAnd(revAlphabet[s], 3), 6), revAlphabet[t]);
    write(stream, c);
}

decode(stream, str) {
    var n = size(str);
    var fullRounds = n/4;
    var rest = remainder(n, 4);
    if (rest == 1) {
        error("a sequence of remainder(length, 4) == 1 has been entered, not supported");
    }
    for (i in range(fullRounds)) {
        decode4(stream, Byte(str[i*4]), Byte(str[i*4+1]), Byte(str[i*4+2]), Byte(str[i*4+3]));
    }
    if (rest == 2) {
        decode4(stream, Byte(str[fullRounds*4]), Byte(str[fullRounds*4+1]), Byte('='), Byte('='));
    } else if (rest == 3) {
        decode4(stream, Byte(str[fullRounds*4]), Byte(str[fullRounds*4+1]), Byte(str[fullRounds*4+2]), Byte('='));
    }
}

overload decode(str) {
    var buf = Vector[Byte]();
    decode(buf, str);
    return move(buf);
}
